/* Generated By:JavaCC: Do not edit this line. ZqlJJParserTokenManager.java */
package anders.akita.parser;
import java.io.*;
import java.util.*;

public class ZqlJJParserTokenManager implements ZqlJJParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x100000000000L) != 0L)
            return 0;
         if ((active1 & 0x400800000000L) != 0L)
            return 37;
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0xfffffL) != 0L)
         {
            jjmatchedKind = 90;
            return 38;
         }
         if ((active1 & 0x4000000000000L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active0 & 0xfcbffc0fffffbce0L) != 0L || (active1 & 0xfffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 1;
            }
            return 38;
         }
         if ((active0 & 0x34003f000004300L) != 0L)
            return 38;
         return -1;
      case 2:
         if ((active0 & 0xfeba0deef5ffb800L) != 0L || (active1 & 0xfffbaL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 2;
            }
            return 38;
         }
         if ((active0 & 0x5f0010a0006e0L) != 0L || (active1 & 0x45L) != 0L)
            return 38;
         return -1;
      case 3:
         if ((active0 & 0x38910d0244a18000L) != 0L || (active1 & 0x68100L) != 0L)
            return 38;
         if ((active0 & 0xc62a80ecb15e3800L) != 0L || (active1 & 0x97ebaL) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
            return 38;
         }
         return -1;
      case 4:
         if ((active0 & 0xc02a00e8314e3800L) != 0L || (active1 & 0x7a12L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 4;
            return 38;
         }
         if ((active0 & 0x600800480100000L) != 0L || (active1 & 0x904a8L) != 0L)
            return 38;
         return -1;
      case 5:
         if ((active0 & 0x800200c0110a3800L) != 0L || (active1 & 0x6210L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
            return 38;
         }
         if ((active0 & 0x4028002820440000L) != 0L || (active1 & 0x1802L) != 0L)
            return 38;
         return -1;
      case 6:
         if ((active0 & 0x20040000a2800L) != 0L || (active1 & 0x6000L) != 0L)
            return 38;
         if ((active0 & 0x8000008011000000L) != 0L || (active1 & 0x210L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return 38;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return 11;
         }
         return -1;
      case 7:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
            return 11;
         }
         if ((active0 & 0x8010000000L) != 0L || (active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
            return 38;
         }
         if ((active0 & 0x8000000001000000L) != 0L || (active1 & 0x10L) != 0L)
            return 38;
         if ((active1 & 0x2000L) != 0L)
            return 11;
         return -1;
      case 8:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 8;
            return 38;
         }
         if ((active0 & 0x8010000000L) != 0L)
            return 38;
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 8;
            return 11;
         }
         return -1;
      case 9:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 9;
            return 11;
         }
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 9;
            return 38;
         }
         return -1;
      case 10:
         if ((active1 & 0x200L) != 0L)
            return 38;
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 10;
            return 11;
         }
         return -1;
      case 11:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 11;
            return 11;
         }
         return -1;
      case 12:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 12;
            return 11;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 37:
         return jjStopAtPos(0, 115);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000L);
      case 40:
         return jjStopAtPos(0, 94);
      case 41:
         return jjStopAtPos(0, 96);
      case 42:
         return jjStopAtPos(0, 109);
      case 43:
         return jjStopAtPos(0, 107);
      case 44:
         return jjStopAtPos(0, 95);
      case 45:
         return jjStartNfaWithStates_0(0, 108, 0);
      case 46:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L);
      case 47:
         return jjStartNfaWithStates_0(0, 114, 3);
      case 59:
         return jjStopAtPos(0, 97);
      case 60:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x46000000000L);
      case 61:
         return jjStopAtPos(0, 98);
      case 62:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 63:
         return jjStopAtPos(0, 113);
      case 94:
         return jjStopAtPos(0, 116);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7e0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x7800L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1f8000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3e00000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x7c000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x380000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3f000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1f00000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x3e000000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x3c0000000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0xf000000000000000L, 0x1L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7eL);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x380L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc00L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf8000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         break;
      case 42:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      case 61:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L);
      case 62:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2100800208000L, active1, 0x7080L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000000c00800L, active1, 0x6L);
      case 70:
      case 102:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 38);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0x18108L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xa40003001000L, active1, 0x20000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000020L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8001e0080000c0L, active1, 0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x800d4801001e2000L, active1, 0x40001L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L);
      case 82:
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x600000600000000L, active1, 0x80200L);
      case 83:
      case 115:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 38);
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x830000000000000L, active1, 0x40L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x70000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 38);
         break;
      case 124:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 101);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000010000L, active1, 0x238L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
      case 67:
      case 99:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 38);
         return jjMoveStringLiteralDfa3_0(active0, 0x80010000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 38);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 38);
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x201000000000000L, active1, 0x800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x18100L);
      case 71:
      case 103:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 38);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000060000000L, active1, 0x80400L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 38);
         return jjMoveStringLiteralDfa3_0(active0, 0x8090000000400000L, active1, 0x1002L);
      case 77:
      case 109:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 70, 38);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000060000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000081000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x680002000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 38);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x46000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2005808000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 38);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 38);
         return jjMoveStringLiteralDfa3_0(active0, 0x201c000200800L, active1, 0x20000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 86:
      case 118:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 38);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 87:
      case 119:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 38);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 38);
         break;
      case 89:
      case 121:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000080001000L, active1, 0x800L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 38);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x6000L);
      case 68:
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 38);
         break;
      case 69:
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 38);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 38);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 38);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 38);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 38);
         return jjMoveStringLiteralDfa4_0(active0, 0x420000e000400000L, active1, 0x2L);
      case 72:
      case 104:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 38);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 75:
      case 107:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 38);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 38);
         break;
      case 76:
      case 108:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 38);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 38);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000010002000L, active1, 0x90L);
      case 77:
      case 109:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 38);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 38);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 38);
         return jjMoveStringLiteralDfa4_0(active0, 0x180000L, active1, 0x200L);
      case 79:
      case 111:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 38);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x400L);
      case 82:
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 38);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10028L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 38);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 38);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0x80000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2800400000000L, active1, 0x1000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 69:
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 38);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 38);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 38);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 38);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000a2800L, active1, 0x1000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000001040000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 78:
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 38);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 38);
         break;
      case 82:
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 38);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 38);
         return jjMoveStringLiteralDfa5_0(active0, 0x200a000001000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 38);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 38);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 38);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 38);
         return jjMoveStringLiteralDfa5_0(active0, 0x20400000L, active1, 0x800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8002000000002000L, active1, 0x6200L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 38);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 38);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000800L, active1, 0L);
      case 71:
      case 103:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 38);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1020000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 38);
         break;
      case 82:
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 38);
         break;
      case 83:
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 38);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 38);
         return jjMoveStringLiteralDfa6_0(active0, 0x8010000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 38);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 38);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 38);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 38);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000001000000L, active1, 0x200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 38);
         break;
      case 78:
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 38);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 38);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 38);
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 38);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 11);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L, active1, 0L);
      case 75:
      case 107:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 38);
         break;
      case 84:
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 38);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 38);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 38);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 73, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(13, 12, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 37;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(23, 27);
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 38:
               case 11:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(11);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(27);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAddTwoStates(23, 24);
                  }
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 42)
                     jjCheckNAddStates(13, 15);
                  break;
               case 6:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 8:
                  if (curChar == 47 && kind > 89)
                     kind = 89;
                  break;
               case 9:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 12:
                  if (curChar == 39)
                     jjCheckNAddStates(10, 12);
                  break;
               case 13:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 15:
                  if ((0x100a400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 16:
                  if (curChar == 39 && kind > 93)
                     kind = 93;
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 18:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 20:
                  if ((0x100a400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 21:
                  if (curChar == 34 && kind > 93)
                     kind = 93;
                  break;
               case 22:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(23, 27);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(0, 6);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(29, 24);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(16, 18);
                  break;
               case 31:
                  if (curChar == 46)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(32, 24);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 46)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 10:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  break;
               case 1:
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  jjCheckNAddTwoStates(7, 5);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(11);
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 14:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x414400494144004L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 19:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x414400494144004L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 12);
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   29, 30, 31, 24, 33, 34, 36, 18, 19, 21, 13, 14, 16, 5, 6, 8, 
   30, 31, 24, 25, 26, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\50", "\54", 
"\51", "\73", "\75", "\56", "\41\75", "\74\75\76", "\74\76", "\76", "\76\75", "\74", 
"\74\75", "\53", "\55", "\52", "\56\52", "\174\174", "\46\46", "\77", "\57", "\45", 
"\136", "\41", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x3fffffe41fffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x3000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x3000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[37];
private final int[] jjstateSet = new int[74];
protected char curChar;
public ZqlJJParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ZqlJJParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 37; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
