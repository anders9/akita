/*
 * This file is part of Zql.
 *
 * Zql is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Zql is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Zql.  If not, see <http://www.gnu.org/licenses/>.
 */


/**

	mysql operator precedenct

	INTERVAL
	BINARY, COLLATE
	!
	- (unary minus), ~ (unary bit inversion)
	^
	*, /, DIV, %, MOD
	-, +
	<<, >>
	&
	|
	= (comparison), <=>, >=, >, <=, <, <>, !=, IS, LIKE, REGEXP, IN
	BETWEEN, CASE, WHEN, THEN, ELSE
	NOT
	&&, AND
	XOR
	||, OR
	= (assignment), :=
	
*/

options{
	JDK_VERSION = "1.6";
    IGNORE_CASE=true;
    STATIC=false;
	//DEBUG_LOOKAHEAD= true ;
	//DEBUG_PARSER = true;
	//DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(ZqlJJParser)

package anders.akita.parser;

import java.io.*;
import java.util.*;

/**
 * ZqlJJParser: an SQL parser
 */
public class ZqlJJParser {

  public static void main(String args[]) throws ParseException {

    ZqlJJParser p = null ;

    if ( args.length < 1  ) {
      System.out.println("Reading from stdin (exit; to finish)");
      p = new ZqlJJParser(System.in) ;

    } else {

      try {
        p = new ZqlJJParser(new DataInputStream(
                          new FileInputStream(args[0]))) ;
      } catch (FileNotFoundException e) {
        System.out.println("File " + args[0] +
                           " not found. Reading from stdin") ;
        p = new ZqlJJParser(System.in) ;
      }
    } // else ends here

    if ( args.length > 0 ) {
      System.out.println(args[0]) ;
    }

    ZStatement st = null;
    while((st = p.SQLStatement()) != null) {
      System.out.println(st.toString());
    }
/*
    Vector v = p.SQLStatements();

    for(int i=0; i<v.size(); i++) {
      ZStatement st = (ZStatement)v.elementAt(i);
      System.out.println(st.toString());
    }
*/

    System.out.println("Parse Successful") ;

  } // main ends here

} // class ZqlJJParser ends here

PARSER_END(ZqlJJParser)


SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\n"
}

/* Prefix      Meaning
    -------------------
    K_          Keyword
    S_          Substitutes
*/
TOKEN: /* SQL Keywords. prefixed with K_ to avoid name clashes */
{
    <K_ALL: "ALL">
|   <K_AND: "AND">
|   <K_ANY: "ANY">
|   <K_AS: "AS">
|   <K_ASC:"ASC">
|   <K_AVG:"AVG">
|   <K_BETWEEN:"BETWEEN">
|   <K_BINARY_INTEGER: "BINARY_INTEGER">
|   <K_BOOLEAN:"BOOLEAN">
|   <K_BY:"BY">
|	<K_CASE:"CASE">
|   <K_CHAR:"CHAR">
|   <K_COMMENT:"COMMENT">
|   <K_COMMIT:"COMMIT">
|   <K_CONNECT:"CONNECT">
|   <K_COUNT:"COUNT">
|   <K_DATE:"DATE">
|	<K_DAY:"DAY">
|   <K_DELETE:"DELETE">
|   <K_DESC:"DESC">
|   <K_DISTINCT:"DISTINCT">
|   <K_DIV:"DIV">
|	<K_ELSE:"ELSE">
|	<K_END:"END">
|   <K_EXCLUSIVE:"EXCLUSIVE">
|   <K_EXISTS:"EXISTS">
|   <K_EXIT:"EXIT">
|   <K_FLOAT:"FLOAT">
|   <K_FOR:"FOR">
|	<K_FALSE: "FALSE">
|   <K_FROM:"FROM">
|   <K_GROUP:"GROUP">
|   <K_HAVING:"HAVING">
|	<K_HOUR:"HOUR">
|   <K_IN:"IN">
|   <K_INSERT:"INSERT">
|   <K_INTEGER:"INTEGER">
|   <K_INTERSECT:"INTERSECT">
|	<K_INTERVAL:"INTERVAL">
|   <K_INTO:"INTO">
|   <K_IS:"IS">
|	<K_JOIN:"JOIN">
|	<K_LEFT:"LEFT">
|   <K_LIKE:"LIKE">
|   <K_LOCK:"LOCK">
|   <K_MAX:"MAX">
|   <K_MIN:"MIN">
|   <K_MOD:"MOD">
|   <K_MINUS:"MINUS">
|	<K_MINUTE:"MINUTE">
|   <K_MODE:"MODE">
|	<K_MONTH:"MONTH">
|   <K_NATURAL:"NATURAL">
|   <K_NOT:"NOT">
|   <K_NOWAIT:"NOWAIT">
|   <K_NULL:"NULL">
|   <K_NUMBER:"NUMBER">
|   <K_OF:"OF">
|	<K_ON:"ON">
|   <K_ONLY:"ONLY">
|   <K_OR:"OR">
|   <K_ORDER:"ORDER">
|	<K_OUTER:"OUTER">
|   <K_PRIOR:"PRIOR">
|	<K_QUARTER:"QUARTER">
|   <K_QUIT:"QUIT">
|   <K_READ:"READ">
|   <K_REAL:"REAL">
|	<K_RIGHT:"RIGHT">
|   <K_REGEXP:"REGEXP">
|	<K_RLIKE:"RLIKE">
|   <K_ROLLBACK:"ROLLBACK">
|   <K_ROW:"ROW">
|	<K_SECOND:"SECOND">
|   <K_SELECT:"SELECT">
|   <K_SET:"SET">
|   <K_SHARE:"SHARE">
|   <K_SMALLINT:"SMALLINT">
|	<K_SOME:"SOME">
|   <K_START:"START">
|   <K_SUM:"SUM">
|   <K_TABLE:"TABLE">
|	<K_THEN:"THEN">
|   <K_TRANSACTION:"TRANSACTION">
|	<K_TRUE: "TRUE">
|   <K_UNION:"UNION">
|   <K_UPDATE:"UPDATE">
|   <K_VALUES:"VALUES">
|   <K_VARCHAR2:"VARCHAR2">
|   <K_VARCHAR:"VARCHAR">
|	<K_WEEK:"WEEK">
|	<K_WHEN:"WHEN">
|   <K_WHERE:"WHERE">
|   <K_WITH:"WITH">
|   <K_WORK:"WORK">
|   <K_WRITE:"WRITE">
|	<K_XOR:"XOR">
|	<K_YEAR:"YEAR">
}

TOKEN : /* Numeric Constants */
{
	< S_NUMBER:  (<FLOAT>  | <FLOAT> ( ["e","E"] ([ "-","+"])? <INTEGER> )? ) >
  | 	< #FLOAT: <INTEGER>
	    | <INTEGER> ( "." <INTEGER> )?
	    | "." <INTEGER>
    	>
  | 	< #INTEGER: ( <DIGIT> )+ >
  | 	< #DIGIT: ["0" - "9"] >
}

SKIP :
{
  "/*" : WithinComment
}

<WithinComment> SKIP :
{
  "*/" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}

SPECIAL_TOKEN:
{
   <LINE_COMMENT: "//"(~["\r","\n"])* ("\r"|"\n")>
}


TOKEN:
{
	< S_IDENTIFIER: ( <LETTER> )+ ( <DIGIT> | <LETTER> |<SPECIAL_CHARS>)* >
| 	< #LETTER: ["a"-"z", "A"-"Z"] >
|   < #SPECIAL_CHARS:  "_">

|   < S_CHAR_LITERAL: 
		 ("'"( ( (~["'","\\"]) | ("\\"( ["n","t","b","r","0","\\","'","\"", "Z", "%", "_"])) )* )"'")
		 |
		 ("\""( ( (~["\"","\\"]) | ("\\"( ["n","t","b","r","0","\\","'","\"", "Z", "%", "_"])) )* )"\"")
	>

}



void BasicDataTypeDeclaration():
{}
{
    (       "CHAR"
        |   "VARCHAR"
        |   "VARCHAR2"
        |   "INTEGER"
        |   "NUMBER"
        |   "NATURAL"
        |   "REAL"
        |   "FLOAT"
    ) [ "(" <S_NUMBER> [ "," <S_NUMBER> ] ")" ]

    |   "DATE"
    |   "BINARY_INTEGER"
    |   "BOOLEAN"
}


/* ---------------- DECLARATIONS SECTION ends here ------------------ */

/* ---------------- Code Section starts here ---------------------- */
                                
Vector SQLStatements():
{
  Vector v = new Vector();
  ZStatement s;
}
{
    (s = SQLStatement() { if(s == null) return v; else v.addElement(s); })+
    { return v; }
}



ZStatement SQLStatement():
{
  ZStatement s = null;
}
{
    s = QueryStatement() { return s; }
|   ( "EXIT" | "QUIT" ) ";" { return null; }
}

String identifier():
{
	Token tk;
}
{
	tk = <S_IDENTIFIER>
	{return tk.toString().toUpperCase();}
}

ZUdf SQLUdf():
{
	String s;
	ZUdf udf;
	ArrayList<String> parm = new ArrayList<String>();
	String funcName;
	ZExp exp;
}
{
	LOOKAHEAD(<EOF>){return null;}
	|
	(
		  funcName = identifier()
		 "(" [ s = identifier() { parm.add(s); }
		 	 ( "," s = identifier() { parm.add(s); } )* ] ")"
		 ":"
		 exp = SQLExpression()
		 ";"
		 {return new ZUdf( funcName, parm, exp );}
	 )
}


// CommitStatement ::= COMMIT [WORK] [COMMENT <comment>];
ZTransactStmt CommitStatement():
{
  Token tk;
  ZTransactStmt t = new ZTransactStmt("COMMIT");
}
{
  "COMMIT" ["WORK"]
  ["COMMENT" tk = <S_CHAR_LITERAL> { t.setComment(tk.toString()); }] ";"
  { return t; }
}

// LockTableStatement ::= LOCK TABLE TableReference (, TableReference)*
//   IN LockMode MODE [NOWAIT];
ZLockTable LockTableStatement():
{
  ZLockTable lck = new ZLockTable();
  Vector v = new Vector();
  String s;
}
{
  "LOCK" "TABLE" s = TableReference() { v.addElement(s); }
  ("," s = TableReference() { v.addElement(s); } )*
  "IN" s = LockMode() { lck.setLockMode(s); } "MODE"
  ["NOWAIT" { lck.nowait_ = true; }] ";"
  { lck.addTables(v); return lck; }
}

// RollbackStatement ::= ROLLBACK [WORK] ["COMMENT" <comment>];
ZTransactStmt RollbackStatement():
{
  Token tk;
  ZTransactStmt t = new ZTransactStmt("ROLLBACK");
}
{
  "ROLLBACK" ["WORK"]
  ["COMMENT" tk = <S_CHAR_LITERAL> { t.setComment(tk.toString()); }] ";"
  { return t; }
}

// SetTransactionStatement ::= SET TRANSACTION READ (ONLY | WRITE)
ZTransactStmt SetTransactionStatement():
{
  StringBuffer b;
  ZTransactStmt t = new ZTransactStmt("SET TRANSACTION");
  boolean rdonly = false;
}
{
  "SET" "TRANSACTION" ("READ" ("ONLY" { rdonly = true; } | "WRITE")) ";"
  { t.readOnly_ = rdonly; return t; }
}

// LockMode ::= ROW SHARE | ROW EXCLUSIVE
//   | SHARE [UPDATE | ROW EXCLUSIVE]
//   | EXCLUSIVE
String LockMode():
{
  StringBuffer b = new StringBuffer();
}
{
   ("ROW" { b.append("ROW "); }
    ("SHARE" { b.append("SHARE"); } | "EXCLUSIVE" { b.append("EXCLUSIVE"); } ))
   { return b.toString(); }
 | ("SHARE" { b.append("SHARE"); }
    ["UPDATE" { b.append(" UPDATE"); }
     | ("ROW" "EXCLUSIVE") { b.append(" ROW EXCLUSIVE"); }])
   { return b.toString(); }
 | ("EXCLUSIVE") { return new String("EXCLUSIVE"); }
}

// UpdateStatement ::=
//   UPDATE TableReference SET ColumnValues [WHERE SQLExpression]
ZUpdate UpdateStatement():
{
  ZUpdate u;
  ZExp e;
  Hashtable t;
  String s;
  Token tk;
}
{
  "UPDATE" s = TableReference() { u = new ZUpdate(s); }
  [ s = identifier() { u.setAlias(s); } ]  /* Alias Name */
  "SET" ColumnValues(u) { }
  [ "WHERE" e = SQLExpression() { u.addWhere(e); } ] ";"
  { return u; }
}

// ColumnValues ::= TableColumn = UpdatedValue (, TableColumn = UpdatedValue)*
void ColumnValues(ZUpdate u):
{
  ZColRef key;
  ZExp val;
}
{
  key = TableColumn() "=" val = UpdatedValue() { u.addColumnUpdate(key.toString(), val); }
  ("," key = TableColumn() "=" val = UpdatedValue()
    { u.addColumnUpdate(key.toString(), val); } )*
  { }
}

// UpdatedValue ::= ( SelectStatement ) | SQLExpression
ZExp UpdatedValue(): // Can be a subquery or a expression
{
  ZExp e;
}
{
  LOOKAHEAD(("(")+ "SELECT")
  "(" e = SelectStatement() ")" { return e; }
  |
  e = SQLExpression() { return e; }
  |
  e = PreparedCol() { return e; } // For prepared columns ("?")
}

// InsertStatement ::= INSERT INTO TableReference
//   [ "(" TableColumn (, TableColumn)* ")" ]
//   ValueSpec | SelectStatement
// ValueSpec ::= VALUES ( SQLExpressionList )
ZInsert InsertStatement():
{
  ZInsert ins;
  String s;
  ZColRef col;
  Vector v, v2;
}
{
  "INSERT" "INTO" s = TableReference() { ins = new ZInsert(s); }
   ["(" col = TableColumn() { v = new Vector(); v.addElement(s); }
    ("," col = TableColumn() { v.addElement(s); } )* ")" { ins.setColumns(v); } ]
   ( "VALUES" "(" v2 = SQLExpressionList() ")"
     {  ins.setValueSpec(v2); }
	)
   ";" { return ins; }
}

// DeleteStatement ::= DELETE [FROM] TableReference [WHERE SQLExpression]
ZDelete DeleteStatement():
{
  ZDelete d;
  ZExp e;
  String s;
}
{
    "DELETE" ["FROM"] s = TableReference() { d = new ZDelete(s); }
    ["WHERE" e = SQLExpression() { d.addWhere(e); }] ";"
    { return d; }
}

// QueryStatement ::= SelectStatement
ZQuery QueryStatement():
{
  ZQuery q;
}
{
    q = SelectStatement() ";" { return q; }
}


/* ---------------- General Productions --------------------- */

ZColRef TableColumn():
{
  String t = null, c;
}
{
	(LOOKAHEAD(2) t = identifier() "." c = identifier()
	|
	c = identifier())
    { return new ZColRef(t, c); }
}


// TableReference ::= OracleObjectName[.OracleObjectName]
String TableReference():
{
  String s;
}
{
    s = identifier() { return s; }
}


ZQuery SelectStatement():
{
  ZQuery q;
  Vector v;
}
{
  q = SelectWithoutOrder()
  [ v = OrderByClause() { q.setOrderBy(v); } ]
  //[ ForUpdateClause() { q.forupdate_ = true; } ]
  { return q; }

}

ZQuery SelectWithoutOrder():
{
  ZQuery q = new ZQuery();
  Vector select;
  ZFromClause from;
  ZExp where = null;
  ZGroupBy groupby = null;
  //ZExpression setclause = null;
}
{
  "SELECT" [ "ALL" | "DISTINCT" { q.distinct_ = true; } ]
  select = SelectList()
  from = FromClause()
  [ where = WhereClause() ]
  //[ ConnectClause() ]
  [ LOOKAHEAD( ("GROUP" "BY")|"HAVING") groupby = GroupByClause() ]
  //[ setclause = SetClause() ]
  {
    q.setSelect(select);
    q.setFrom(from);
    q.setWhere(where);
    q.setGroupBy(groupby);
    //q.addSet(setclause);

    return q;
  }
}

/* Checks for whatever follows  SELECT */

// SelectList ::= * | COUNT(*) | SelectItem (, SelectItem)*
// 18/10/01 PY. Gibello - Removed "COUNT(*)" from here
// COUNT is an aggregate, like AVG...
Vector SelectList():
{
  Vector v = new Vector(8);
  ZSelectItem elem;
}
{
    elem = SelectItem() { v.addElement(elem); }
    ("," elem = SelectItem() { v.addElement(elem); } )*
     { 
     	int star_cnt = 0;
    	for(Object e: v){
    		if(((ZSelectItem)e).type == ZSelectItem.STAR)
    			++star_cnt;
    	}
    	if(star_cnt > 1)
    		throw new ParseException("Parse error: not permit multiple select *");
    	return v; 
     }
}


// 01/07/00 PY. Gibello - Added LOOKAHEAD(3) before COUNT
// Due to a fix in AggregateFunc (COUNT added) that made the grammar ambiguous
// 18/10/01 PY. Gibello - Removed "COUNT(*)" from here (see aggregate funcs)

// SelectItem() ::= SelectStar | SQLSimpleExpression() [SelectAlias]
ZSelectItem SelectItem():
{
  String s = null;
  ZSelectItem it;
  ZExp e;
}
{
	LOOKAHEAD(1) ("*" {return new ZSelectItem();})
|
	LOOKAHEAD(2)(s = identifier()".*" { return new ZSelectItem(s); } )// table.*
|   
	(e = SQLExpression() // Column or Expression
    [["AS"]  s = identifier()  ] // Column Alias
    { return new ZSelectItem(e, s); })
}

ZFromClause FromClause():
{
	ZFromClause fc;
}
{
	"FROM"
	(
		LOOKAHEAD(FromItemEx() ("LEFT"|"RIGHT") ) fc = LeftOuterJoinClause() | 
		fc = InnerJoinClause()
	)
	{return fc;}
}

// FromClause ::= FromItem (, FromItem)*
ZFromClause InnerJoinClause():
{
  Vector v = new Vector(8);
  ZFromItemEx f;
}
{
    f = FromItemEx() { v.addElement(f); }
    ( "," f = FromItemEx() { v.addElement(f); } )*
    { return new ZFromClause(ZFromClause.INNER_JOIN, v, null); }
}
ZFromClause LeftOuterJoinClause():
{
	ZFromClause f;
	ZFromItemEx il, ir;
	ZExp cond = null;
	int join_type;
}
{
	il = FromItemEx() 
	("LEFT" {join_type = ZFromClause.LEFT_JOIN;}|"RIGHT" {join_type = ZFromClause.RIGHT_JOIN;})
	 ["OUTER"] "JOIN" ir = FromItemEx() 
	[ "ON" cond = SQLExpression() ]
	{
		Vector v = new Vector(2);
		v.addElement(il);
		v.addElement(ir);
		return new ZFromClause(join_type, v, cond);
	}
}
// FromItemEx ::= ( FromItem | "(" SelectStatement ")" ) [ "AS" alias ]
ZFromItemEx FromItemEx():
{
	ZFromItemEx f = null;
	ZQuery subq = null;
	ZFromItem tab_item = null;
	String tab = null;
	String s = null;
}
{
	( tab =  TableReference() { tab_item = new ZFromItem(tab); f = new ZFromItemEx(tab_item); }
	 |  "(" subq = SelectStatement() ")" { f = new ZFromItemEx(subq); }
	)
	 [ ["AS"] s = identifier() {
	 	 f.alias = s;
	  } ]  /* Alias Name */
	{return f; }
}


ZExp WhereClause():
{
  ZExp e;
}
{
    "WHERE" e = SQLExpression() { return e; }
}
/*
void ConnectClause():
{}
{
    // The following grammar will take 2 "START WITH" expressions
    // which is not correct. But alright, because only valid statements
    // will be given.
   (["START" "WITH" SQLExpression()] "CONNECT" "BY" SQLExpression()
    ["START" "WITH" SQLExpression()])
}
*/
ZGroupBy GroupByClause():
{
  ZGroupBy g = null;
  Vector v = null;
  ZExp e;
}
{
  (("GROUP" "BY" v = GroupByList() { g = new ZGroupBy(v); }
  	 ["HAVING" e = SQLExpression() { g.setHaving(e);} ] )
  |("HAVING" e = SQLExpression() { g = new ZGroupBy(null); g.setHaving(e);} ))
  { return g; }
}
Vector GroupByList():
{
  Vector v = new Vector(8);
  ZExp e;
}
{
    e = SQLExpression() { v.addElement(e); }
    ("," e = TableColumn() { v.addElement(e); } )*
    { return v; }
}

Vector OrderByClause():
{
  Vector v = new Vector();
  ZExp s;
  ZOrderBy ob;
}
{
    "ORDER" "BY" s = SQLExpression() { ob = new ZOrderBy(s); }
    ["ASC" | "DESC" { ob.setAscOrder(false); }] { v.addElement(ob); }
    ("," s = SQLExpression() { ob = new ZOrderBy(s); }
     ["ASC" | "DESC" { ob.setAscOrder(false); }] { v.addElement(ob); } )*
    { return v; }
}
/*
void ForUpdateClause():
{}
{
    "FOR" "UPDATE" [ "OF" TableColumn() ("," TableColumn())* ]
}
*/
ZExp SQLExpression():
{
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
}
{
    e1 = SQLXORExpression()
    ( ("OR"|"||") e2 = SQLXORExpression() {
      if(single) { e = new ZExpression(Operator.OR, e1); }
      single=false;
      e.addOperand(e2);
    } )*
    { return (single ? e1 : e); }
}

ZExp SQLXORExpression():
{
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
}
{
    e1 = SQLAndExpression()
    ( ("XOR") e2 = SQLAndExpression() {
      if(single) { e = new ZExpression(Operator.XOR, e1); }
      single=false;
      e.addOperand(e2);
    } )*
    { return (single ? e1 : e); }
}


ZExp SQLAndExpression():
{
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
}
{
    e1 = SQLUnaryLogicalExpression()
    ( ("AND"|"&&") e2 = SQLUnaryLogicalExpression() {
      if(single) { e = new ZExpression(Operator.AND, e1); }
      single=false;
      e.addOperand(e2);
    } )*
    { return (single ? e1 : e); }
}

ZExp SQLUnaryLogicalExpression():
{
  ZExp e1, e;
  boolean not = false;
}
{
    LOOKAHEAD(2) e = ExistsClause() { return e; }
|   ( ["NOT" { not = true; } ]
     e1 = SQLConditionL1Expression() {
       if(not) e = new ZExpression(Operator.NOT, e1);
       else e = e1;
       return e;
     }
    )
}

ZExp ExistsClause():
{
  ZQuery q;
  boolean not = false;
}
{
    ["NOT" { not = true; } ] "EXISTS"  q = SQLInnerQuery()  {
      q.innerQType = ZQuery.InnerQType.EXISTS;
      return new ZExpression(not ? Operator.NOT_EXISTS : Operator.EXISTS, q);
    }
}

ZExp SQLConditionL1Expression():
{
	ZExp e;
}
{
	LOOKAHEAD("CASE") e = SQLSwitchClause() {return e;}
	|
	LOOKAHEAD(SQLConditionL2Expression() ["NOT"] "BETWEEN" ) e = SQLBetweenClause() {return e;}
	|
	e = SQLConditionL2Expression() { return e;}
}

ZExp SQLSwitchClause():
{
	ZExp e, cmpVal = null, ce, re;
	ZExp else_result = null;
	Vector cond = new Vector(), result = new Vector() ;
}
{
	("CASE" [cmpVal = SQLConditionL2Expression() ]
	("WHEN" ce = SQLConditionL2Expression()
	 "THEN" re = SQLConditionL2Expression()
	  {cond.addElement(ce); result.addElement(re);})+
	["ELSE" else_result = SQLConditionL2Expression() ]
	"END")
	{return new ZSwitchExpr(cond, result, cmpVal, else_result); }
}

ZExp SQLBetweenClause():
{
  ZExp  e0, e1, e2;
  boolean not = false;
}
{
  e0 = SQLConditionL2Expression()
  ["NOT" { not = true; }]
  "BETWEEN" e1 = SQLConditionL2Expression() "AND" e2 = SQLConditionL2Expression() {
    return new ZExpression( not ? Operator.NOT_BETWEEN : Operator.BETWEEN, e0, e1, e2);
  }
}

Operator Relop():
{
  Token op;
}
{
   op = "="  { return Operator.EQ; }
 | op = "!=" { return Operator.NOT_EQ; }
 | op = "<=>"{ return Operator.SAFE_EQ; }
 | op = "<>" { return Operator.NOT_EQ; }
 | op = ">"  { return Operator.MORE; }
 | op = ">=" { return Operator.MORE_EQ; }
 | op = "<"  { return Operator.LESS; }
 | op = "<=" { return Operator.LESS_EQ; }
}


ZExp SQLConditionL2Expression():
{
	ZExp e;
}
{
	(
	LOOKAHEAD(SQLSimpleExpression() Relop() ("ALL"|"ANY"|"SOME"))  e = SQLAllAnySubquery()
|	LOOKAHEAD(SQLSimpleExpression() ["NOT"] "IN")  e = SQLInSubquery() 
|   LOOKAHEAD(SQLSimpleExpression() Relop() ) e = SQLRelationalExpression()
|	LOOKAHEAD(SQLSimpleExpression() "IS") e = SQLIsNullExpression()
|	LOOKAHEAD(SQLSimpleExpression() ["NOT"]  "LIKE") e = SQLLikeExpression()
|	LOOKAHEAD(SQLSimpleExpression()  ["NOT"] ("RLIKE"|"REGEXP"))  e = SQLRegexpExpression()
|	e = SQLSimpleExpression()
	)
	{return e;}
}
ZExp SQLAllAnySubquery():
{
	ZExp e1;
	ZQuery e2;
	Operator op;
	boolean isAll;
}
{
	e1 = SQLSimpleExpression() op = Relop()  
	("ALL"{ isAll = true; }| ("ANY"|"SOME") { isAll = false; }) 
	e2 = SQLInnerQuery()
	
	{	
		if(op.equals("<=>"))
			throw new ParseException("Can't use <=> operator in ALL/ANY sub-Query");
		e2.innerQType = ( isAll? ZQuery.InnerQType.ALL : ZQuery.InnerQType.ANY );
		return new ZExpression(op, e1, e2); 
	}
}
ZExp SQLInSubquery():
{
	ZExp e1;
	ZQuery e2;
	Token op;
	boolean not = false;
}
{
	e1 = SQLSimpleExpression() ["NOT" { not = true; }] "IN"  e2 = SQLInnerQuery()
	{
		e2.innerQType = ZQuery.InnerQType.IN;
		return new ZExpression( not? Operator.NOT_IN:Operator.IN, e1, e2); 
	}
}
ZExp SQLRelationalExpression():
{
	ZExp e1, e2;
	Operator op;
}
{
	e1 = SQLSimpleExpression() op = Relop()  e2 = SQLSimpleExpression()
	
	{	
		return new ZExpression(op, e1, e2); 
	}
}
ZExpression SQLIsNullExpression():
{
	ZExp e1;
  boolean not = false;
}
{
  e1 = SQLSimpleExpression() "IS" ["NOT" { not = true; }] "NULL"
  {
    return new ZExpression( not ? Operator.IS_NOT_NULL : Operator.IS_NULL, e1);
  }
}


Vector SQLExpressionList():
{
  Vector v = new Vector(8);
  ZExp e;
}
{
    e = SQLExpression() { v.addElement(e); }
    ("," e = SQLExpression() { v.addElement(e); } )*
    { return v; }
}


// For prepared columns ("?")

ZExp PreparedCol(): {}
{
  "?" { return new ZConstant(null, ZConstant.PREPARED_COL); } // For prepared columns ("?")
}



ZExpression SQLLikeExpression():
{
  ZExp e1, e2;
  boolean not = false;
}
{
	 e1 = SQLSimpleExpression()
  ["NOT" { not = true; }]
  "LIKE" e2 = SQLSimpleExpression() {
    return new ZExpression( not ? Operator.NOT_LIKE : Operator.LIKE , e1, e2);
  }
}

ZExpression SQLRegexpExpression():
{
	ZExp e1, e2;
  boolean not = false;
}
{
	 e1 = SQLSimpleExpression()
 	 ["NOT" { not = true; }]
  	("LIKE"|"REGEXP") 
  	e2 = SQLSimpleExpression() 
  {
    return new ZExpression( not ? Operator.NOT_RLIKE : Operator.RLIKE , e1, e2);
  }
}

ZExp SQLSimpleExpression():
{
  Token op;
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
}
{
    e1 = SQLBitAndExpression()
    ( op = "|" e2 = SQLBitAndExpression() {
      if(single) e = new ZExpression( Operator.BIT_OR, e1);
      single = false;
      e.addOperand(e2);
    } )*
    { return (single ? e1 : e); }
}
ZExp SQLBitAndExpression():
{
  Token op;
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
}
{
    e1 = SQLBitShiftExpression()
    ( op = "&" e2 = SQLBitShiftExpression() {
      if(single) e = new ZExpression( Operator.BIT_AND, e1);
      single = false;
      e.addOperand(e2);
    } )*
    { return (single ? e1 : e); }
}

ZExp SQLBitShiftExpression():
{
  Operator op;
  ZExp e1, e2;
  ZExpression e = null;
}
{
    e1 = SQLAddSubExpression()
    ( 
    	( "<<" { op = Operator.BIT_SHL; } | ">>" { op = Operator.BIT_SHR; } ) 
    	e2 = SQLAddSubExpression() 
    	{
      		e = new ZExpression(op, e1);
     		e.addOperand(e2);
      		e1 = e;
    	} 
    )*
    { return e1; }
}

// SQLSimpleExpression
//    ::= SQLMultiplicativeExpression (OP SQLMultiplicativeExpression)*
// OP ::= + | - 
ZExp SQLAddSubExpression():
{
  Operator op;
  ZExp e1, e2;
  ZExpression e = null;
}
{
    e1 = SQLMultiplicativeExpression()
    ( 
    	( "+" { op = Operator.ADD; } | "-" { op = Operator.SUB; } ) 
    	e2 = SQLMultiplicativeExpression() 
    	{
      		e = new ZExpression(op, e1);
     		e.addOperand(e2);
      		e1 = e;
    	} 
    )*
    { return e1; }
}


// SQLMultiplicativeExpression
//    ::= SQLExpotentExpression (OP SQLExpotentExpression)*
// OP ::= * | / | "DIV" | "MOD" | % |
ZExp SQLMultiplicativeExpression():
{
  Operator op;
  ZExp e1, e2;
  ZExpression e = null;
}
{
    e1 = SQLBitXORExpression()
    (	
    	( "*" { op = Operator.MUL; } | "/" { op = Operator.DIV; } | "%" { op = Operator.MOD; } | "DIV" { op = Operator.DIV; } | "MOD" { op = Operator.MOD; } ) 
    	e2 = SQLBitXORExpression() 
    	{
      		e = new ZExpression(op, e1);
      		e.addOperand(e2); 
      		e1 = e;
    	} 
    )*
    { return e1; }
}

ZExp SQLBitXORExpression():
{
  Token op;
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
}
{
    e1 = SQLUnaryExpression()
    ( op = "^" e2 = SQLUnaryExpression() {
      if(single) e = new ZExpression( Operator.BIT_XOR, e1);
      single = false;
      e.addOperand(e2);
    } )*
    { return (single ? e1 : e); }
}


/*
ZConstant SQLNumber():
{
	boolean neg = false;
	Token  num;
}
{
	[ "+" |  "-" { neg = true;} ] num = <S_NUMBER> 
	{return new ZConstant( neg ? "-" + num.toString() : num.toString(), ZConstant.NUMBER); }
}
*/
// SQLUnaryExpression ::= [+|-] SQLInversionExpression
ZExp SQLUnaryExpression():
{
  ZExp e1;
  boolean neg = false;
  boolean inv = false;
}
{
//	LOOKAHEAD( ("+"|"-") <S_NUMBER> ) e = SQLNumber() {return e; }
//|
   [ "+" |  "-" { neg = true; } | "~" { inv = true; } ] e1 = SQLNotHighPrecExpression() 
   { 
    if (neg){
      return (( e1 instanceof ZConstant && ((ZConstant)e1).getType() == ZConstant.NUMBER )? 
     	new ZConstant("-" + ((ZConstant)e1).getValue() ,  ZConstant.NUMBER )
     	: new ZExpression(Operator.NEG, e1));
    }else if (inv){
        return new ZExpression(Operator.INV, e1);
     }
     else return e1;
  }
}

ZExp SQLNotHighPrecExpression():
{
  Token op = null;
  ZExp e;
}
{
  [ op = "!" ] e = SQLPrimaryExpression() { 
    if(op == null ) return e;
    else return new ZExpression(Operator.NOT_HIGH_PREC, e);
  }
}

ZExp SQLPrimaryExpression():
{
  ZColRef col;
  Token t;
  String s, s2;
  int func_type = -1;
  ZExp e = null;
  int nparm;
  Vector parm = null;
}
{
  "NULL" { return new ZConstant("NULL", ZConstant.NULL); }
|  LOOKAHEAD( "COUNT" "(" ["ALL"] ("*"|SQLExpression()) ")" ) 
	"COUNT" "(" ["ALL"]("*"|e = SQLExpression()) ")" 
	{
	parm = new Vector(1);
	if(e != null)parm.add(e);
     return new ZExpression("COUNT", parm, false);
   }
|  LOOKAHEAD( "COUNT" "(" "DISTINCT" )
	"COUNT" "(" "DISTINCT" 
	 e = SQLExpression() { parm=new Vector(); parm.addElement(e); }
    ("," e = SQLExpression() { parm.addElement(e); } )*
    ")"
    {return new ZExpression("COUNT", parm, true); }
|  
   LOOKAHEAD( FunctionOrAggregateName() "(") //function/aggreation
	      (s = FunctionOrAggregateName() 
	      "("
	           (
		           LOOKAHEAD("ALL"|"DISTINCT") (
		           		("ALL" { func_type = ZExpression.AGGR_ALL; } | "DISTINCT" { func_type = ZExpression.AGGR_DISTINCT; }) 
		           		 e = SQLExpression()
		           )
		           |
		           LOOKAHEAD(")") {parm = new Vector(0);}
				   |
		           parm = SQLExpressionList()
	           ) 
	      ")" )
	 {
	    if( FunctionMgr.isAggregation(s) ){
	    	if(func_type == -1){
	    		func_type = ZExpression.AGGR_ALL;
	    		if(parm.size() != 1)
	    			throw new ParseException("Aggregate " + s + " should have 1 parameter");
	    		e = (ZExp)parm.get(0);
	    	}
	    	//add distinct judgement here 
	    	if( func_type == ZExpression.AGGR_DISTINCT && !FunctionMgr.aggrCanUseDistinct(s) )
	    		throw new ParseException("Cannot use DISTINCT on aggregation: " + s);
	    	return new ZExpression(s, e, func_type == ZExpression.AGGR_DISTINCT);
	    }
		
	  else if( FunctionMgr.isFunction(s) ){
	  	if(func_type != -1)
	  		throw new ParseException("Function " + s + " should not have modifier ALL/DISTINCT");
	    nparm = FunctionMgr.getFuncParmN(s);
	    if( nparm != ZExpression.VAR_PARAM && nparm != parm.size() ) {
	      throw new ParseException("Function " + s + " should have "
	         + nparm + " parameter(s)");
	    }
	    return new ZExpression(s, parm);
	  }
	  
	  else if ( FunctionMgr.isUdf(s) ){
	  	if(func_type != -1)
	  		throw new ParseException("UDF " + s + " should not have modifier ALL/DISTINCT");
	  	nparm = FunctionMgr.getUdfParmN(s);
	  	if( parm.size() != nparm )
	  		throw new ParseException("Function " + s + " should have "
	        	 + nparm + " parameter(s)");
	    return new ZExpression(s, parm, ZExpression.UDF);
	  }
	  else throw new ParseException("Undefined function/aggregation/UDF: " + s);
   }  
| LOOKAHEAD	("(" "SELECT") e = SQLInnerQuery() {return e;}
| LOOKAHEAD ("(") "(" e = SQLExpression() ")" { return e; }   
|  col = TableColumn() { return col; }
|  t = <S_NUMBER> { return new ZConstant(t.toString(), ZConstant.NUMBER); }
|  t = <S_CHAR_LITERAL> { return new ZConstant(t.toString(), ZConstant.STRING); }
|  (t = "TRUE" | t = "FALSE") { return new ZConstant(t.toString(), ZConstant.BOOL); }
|  e = Interval() {return e;}
}
String FunctionOrAggregateName():
{
  Token t;
  String s;
}
{
	(
		  t = "SUM" 
		| t = "AVG" 
		| t = "MAX" 
		| t = "MIN"
		//| t = "COUNT"
		| t = "LEFT"
		| t = "RIGHT"
		| t = "MOD"
		| t = "DATE"
		| t = "DAY"
		| t = "HOUR"
		| t = "MINUTE"
		| t = "MONTH"
		| t = "QUARTER"
		| t = "SECOND"
		| t = "WEEK"
		| t = "YEAR"
	)
	 {return t.toString().toUpperCase(); }
	|
	s = identifier() { return s; }
}
ZInterval Interval():
{ 	
	String type;
	ZExp exp;
}	
{
	"INTERVAL" exp = SQLExpression() type = IntervalType()
	{return new ZInterval(type, exp);}
}


String IntervalType():
{
	Token t;
}
{
	(
	t = "SECOND"
|	t = "MINUTE"
|	t = "HOUR"
|	t = "DAY"
|	t = "WEEK"
|	t = "MONTH"
|	t = "QUARTER"
|	t = "YEAR"
)
	{return t.toString();}
}


ZQuery SQLInnerQuery():
{
  ZQuery q = new ZQuery();
  Vector select = new Vector(1);
  ZExp exp;
  ZFromClause from;
  ZExp where = null;
}
{
   "(" 
     "SELECT" [ "ALL" | "DISTINCT" { q.distinct_ = true; } ]
  exp = SQLExpression() { select.add(new ZSelectItem(exp, null)); }
  from = FromClause()
  [ where = WhereClause() ]
	")"

  {
    q.setSelect(select);
    q.setFrom(from);
    q.setWhere(where);
	q.innerQType = ZQuery.InnerQType.NORMAL;
  	return q; 
  }
}

