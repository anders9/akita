/*
 * This file is part of Zql.
 *
 * Zql is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Zql is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Zql.  If not, see <http://www.gnu.org/licenses/>.
 */

options{
	JDK_VERSION = "1.6";
    IGNORE_CASE=true;
    STATIC=false;
	//DEBUG_LOOKAHEAD= true ;
	//DEBUG_PARSER = true;
}

PARSER_BEGIN(ZqlJJParser)

package anders.akita.parser;

import java.io.*;
import java.util.*;

/**
 * ZqlJJParser: an SQL parser
 */
public class ZqlJJParser {

  public static void main(String args[]) throws ParseException {

    ZqlJJParser p = null ;

    if ( args.length < 1  ) {
      System.out.println("Reading from stdin (exit; to finish)");
      p = new ZqlJJParser(System.in) ;

    } else {

      try {
        p = new ZqlJJParser(new DataInputStream(
                          new FileInputStream(args[0]))) ;
      } catch (FileNotFoundException e) {
        System.out.println("File " + args[0] +
                           " not found. Reading from stdin") ;
        p = new ZqlJJParser(System.in) ;
      }
    } // else ends here

    if ( args.length > 0 ) {
      System.out.println(args[0]) ;
    }

    ZStatement st = null;
    while((st = p.SQLStatement()) != null) {
      System.out.println(st.toString());
    }
/*
    Vector v = p.SQLStatements();

    for(int i=0; i<v.size(); i++) {
      ZStatement st = (ZStatement)v.elementAt(i);
      System.out.println(st.toString());
    }
*/

    System.out.println("Parse Successful") ;

  } // main ends here

} // class ZqlJJParser ends here

PARSER_END(ZqlJJParser)


SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\n"
}

/* Prefix      Meaning
    -------------------
    K_          Keyword
    S_          Substitutes
*/
TOKEN: /* SQL Keywords. prefixed with K_ to avoid name clashes */
{
    <K_ALL: "ALL">
|   <K_AND: "AND">
|   <K_ANY: "ANY">
|   <K_AS: "AS">
|   <K_ASC:"ASC">
|   <K_AVG:"AVG">
|   <K_BETWEEN:"BETWEEN">
|   <K_BINARY_INTEGER: "BINARY_INTEGER">
|   <K_BOOLEAN:"BOOLEAN">
|   <K_BY:"BY">
|	<K_CASE:"CASE">
|   <K_CHAR:"CHAR">
|   <K_COMMENT:"COMMENT">
|   <K_COMMIT:"COMMIT">
|   <K_CONNECT:"CONNECT">
|   <K_COUNT:"COUNT">
|   <K_DATE:"DATE">
|	<K_DAY:"DAY">
|   <K_DELETE:"DELETE">
|   <K_DESC:"DESC">
|   <K_DISTINCT:"DISTINCT">
|   <K_DIV:"DIV">
|	<K_ELSE:"ELSE">
|	<K_END:"END">
|   <K_EXCLUSIVE:"EXCLUSIVE">
|   <K_EXISTS:"EXISTS">
|   <K_EXIT:"EXIT">
|   <K_FLOAT:"FLOAT">
|   <K_FOR:"FOR">
|   <K_FROM:"FROM">
|   <K_GROUP:"GROUP">
|   <K_HAVING:"HAVING">
|	<K_HOUR:"HOUR">
|   <K_IN:"IN">
|   <K_INSERT:"INSERT">
|   <K_INTEGER:"INTEGER">
|   <K_INTERSECT:"INTERSECT">
|	<K_INTERVAL:"INTERVAL">
|   <K_INTO:"INTO">
|   <K_IS:"IS">
|	<K_JOIN:"JOIN">
|	<K_LEFT:"LEFT">
|   <K_LIKE:"LIKE">
|   <K_LOCK:"LOCK">
|   <K_MAX:"MAX">
|   <K_MIN:"MIN">
|   <K_MOD:"MOD">
|   <K_MINUS:"MINUS">
|	<K_MINUTE:"MINUTE">
|   <K_MODE:"MODE">
|	<K_MONTH:"MONTH">
|   <K_NATURAL:"NATURAL">
|   <K_NOT:"NOT">
|   <K_NOWAIT:"NOWAIT">
|   <K_NULL:"NULL">
|   <K_NUMBER:"NUMBER">
|   <K_OF:"OF">
|	<K_ON:"ON">
|   <K_ONLY:"ONLY">
|   <K_OR:"OR">
|   <K_ORDER:"ORDER">
|	<K_OUTER:"OUTER">
|   <K_PRIOR:"PRIOR">
|	<K_QUARTER:"QUARTER">
|   <K_QUIT:"QUIT">
|   <K_READ:"READ">
|   <K_REAL:"REAL">
|   <K_REGEXP:"REGEXP">
|   <K_ROLLBACK:"ROLLBACK">
|   <K_ROW:"ROW">
|	<K_SECOND:"SECOND">
|   <K_SELECT:"SELECT">
|   <K_SET:"SET">
|   <K_SHARE:"SHARE">
|   <K_SMALLINT:"SMALLINT">
|   <K_START:"START">
|   <K_SUM:"SUM">
|   <K_TABLE:"TABLE">
|	<K_THEN:"THEN">
|   <K_TRANSACTION:"TRANSACTION">
|   <K_UNION:"UNION">
|   <K_UPDATE:"UPDATE">
|   <K_VALUES:"VALUES">
|   <K_VARCHAR2:"VARCHAR2">
|   <K_VARCHAR:"VARCHAR">
|	<K_WEEK:"WEEK">
|	<K_WHEN:"WHEN">
|   <K_WHERE:"WHERE">
|   <K_WITH:"WITH">
|   <K_WORK:"WORK">
|   <K_WRITE:"WRITE">
|	<K_YEAR:"YEAR">
}

TOKEN : /* Numeric Constants */
{
	< S_NUMBER: <FLOAT>
	    | <FLOAT> ( ["e","E"] ([ "-","+"])? <INTEGER> )?
    	>
  | 	< #FLOAT: <INTEGER>
	    | <INTEGER> ( "." <INTEGER> )?
	    | "." <INTEGER>
    	>
  | 	< #INTEGER: ( <DIGIT> )+ >
  | 	< #DIGIT: ["0" - "9"] >
}

SPECIAL_TOKEN:
{
   <LINE_COMMENT: "--"(~["\r","\n"])*>
|  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


TOKEN:
{
	< S_IDENTIFIER: ( <LETTER> )+ ( <DIGIT> | <LETTER> |<SPECIAL_CHARS>)* >
| 	< #LETTER: ["a"-"z", "A"-"Z"] >
|   < #SPECIAL_CHARS:  "_">
//|   < S_BIND: ":" <S_IDENTIFIER> ("." <S_IDENTIFIER>)? >
|   < S_CHAR_LITERAL: 
		 ("'"( ( (~["'","\\"]) | ("\\"( ["n","t","b","r","0","\\","'","\"", "Z", "%", "_"])) )* )"'")
		 |
		 ("\""( ( (~["\"","\\"]) | ("\\"( ["n","t","b","r","0","\\","'","\"", "Z", "%", "_"])) )* )"\"")
	>
//|   < S_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])* "\"" >
}



void BasicDataTypeDeclaration():
{}
{
    (       "CHAR"
        |   "VARCHAR"
        |   "VARCHAR2"
        |   "INTEGER"
        |   "NUMBER"
        |   "NATURAL"
        |   "REAL"
        |   "FLOAT"
    ) [ "(" <S_NUMBER> [ "," <S_NUMBER> ] ")" ]

    |   "DATE"
    |   "BINARY_INTEGER"
    |   "BOOLEAN"
}


/* ---------------- DECLARATIONS SECTION ends here ------------------ */

/* ---------------- Code Section starts here ---------------------- */
                                
Vector SQLStatements():
{
  Vector v = new Vector();
  ZStatement s;
}
{
    (s = SQLStatement() { if(s == null) return v; else v.addElement(s); })+
    { return v; }
}

ZStatement SQLStatement():
{
  ZStatement s = null;
}
{
    s = CommitStatement() { return s; }
    |
    s = DeleteStatement() { return s; }
    |
    s = InsertStatement() { return s; }
    |
    s = LockTableStatement() { return s; }
    |
    s = RollbackStatement() { return s; }
    |
    s = QueryStatement() { return s; }
    |
    s = SetTransactionStatement() { return s; }
    |
    s = UpdateStatement() { return s; }
    |
    ( "EXIT" | "QUIT" ) ";" { return null; }
}

// CommitStatement ::= COMMIT [WORK] [COMMENT <comment>];
ZTransactStmt CommitStatement():
{
  Token tk;
  ZTransactStmt t = new ZTransactStmt("COMMIT");
}
{
  "COMMIT" ["WORK"]
  ["COMMENT" tk = <S_CHAR_LITERAL> { t.setComment(tk.toString()); }] ";"
  { return t; }
}

// LockTableStatement ::= LOCK TABLE TableReference (, TableReference)*
//   IN LockMode MODE [NOWAIT];
ZLockTable LockTableStatement():
{
  ZLockTable lck = new ZLockTable();
  Vector v = new Vector();
  String s;
}
{
  "LOCK" "TABLE" s = TableReference() { v.addElement(s); }
  ("," s = TableReference() { v.addElement(s); } )*
  "IN" s = LockMode() { lck.setLockMode(s); } "MODE"
  ["NOWAIT" { lck.nowait_ = true; }] ";"
  { lck.addTables(v); return lck; }
}

// RollbackStatement ::= ROLLBACK [WORK] ["COMMENT" <comment>];
ZTransactStmt RollbackStatement():
{
  Token tk;
  ZTransactStmt t = new ZTransactStmt("ROLLBACK");
}
{
  "ROLLBACK" ["WORK"]
  ["COMMENT" tk = <S_CHAR_LITERAL> { t.setComment(tk.toString()); }] ";"
  { return t; }
}

// SetTransactionStatement ::= SET TRANSACTION READ (ONLY | WRITE)
ZTransactStmt SetTransactionStatement():
{
  StringBuffer b;
  ZTransactStmt t = new ZTransactStmt("SET TRANSACTION");
  boolean rdonly = false;
}
{
  "SET" "TRANSACTION" ("READ" ("ONLY" { rdonly = true; } | "WRITE")) ";"
  { t.readOnly_ = rdonly; return t; }
}

// LockMode ::= ROW SHARE | ROW EXCLUSIVE
//   | SHARE [UPDATE | ROW EXCLUSIVE]
//   | EXCLUSIVE
String LockMode():
{
  StringBuffer b = new StringBuffer();
}
{
   ("ROW" { b.append("ROW "); }
    ("SHARE" { b.append("SHARE"); } | "EXCLUSIVE" { b.append("EXCLUSIVE"); } ))
   { return b.toString(); }
 | ("SHARE" { b.append("SHARE"); }
    ["UPDATE" { b.append(" UPDATE"); }
     | ("ROW" "EXCLUSIVE") { b.append(" ROW EXCLUSIVE"); }])
   { return b.toString(); }
 | ("EXCLUSIVE") { return new String("EXCLUSIVE"); }
}

// UpdateStatement ::=
//   UPDATE TableReference SET ColumnValues [WHERE SQLExpression]
ZUpdate UpdateStatement():
{
  ZUpdate u;
  ZExp e;
  Hashtable t;
  String s;
  Token tk;
}
{
  "UPDATE" s = TableReference() { u = new ZUpdate(s); }
  [ tk = <S_IDENTIFIER> { u.setAlias(tk.toString()); } ]  /* Alias Name */
  "SET" ColumnValues(u) { }
  [ "WHERE" e = SQLExpression() { u.addWhere(e); } ] ";"
  { return u; }
}

// ColumnValues ::= TableColumn = UpdatedValue (, TableColumn = UpdatedValue)*
void ColumnValues(ZUpdate u):
{
  String key;
  ZExp val;
}
{
  key = TableColumn() "=" val = UpdatedValue() { u.addColumnUpdate(key, val); }
  ("," key = TableColumn() "=" val = UpdatedValue()
    { u.addColumnUpdate(key, val); } )*
  { }
}

// UpdatedValue ::= ( SelectStatement ) | SQLExpression
ZExp UpdatedValue(): // Can be a subquery or a expression
{
  ZExp e;
}
{
  LOOKAHEAD(("(")+ "SELECT")
  "(" e = SelectStatement() ")" { return e; }
  |
  e = SQLExpression() { return e; }
  |
  e = PreparedCol() { return e; } // For prepared columns ("?")
}

// InsertStatement ::= INSERT INTO TableReference
//   [ "(" TableColumn (, TableColumn)* ")" ]
//   ValueSpec | SelectStatement
// ValueSpec ::= VALUES ( SQLExpressionList )
ZInsert InsertStatement():
{
  ZInsert ins;
  String s;
  Vector v;
  ZQuery q;
}
{
  "INSERT" "INTO" s = TableReference() { ins = new ZInsert(s); }
   ["(" s = TableColumn() { v = new Vector(); v.addElement(s); }
    ("," s = TableColumn() { v.addElement(s); } )* ")" { ins.addColumns(v); } ]
   ( "VALUES" "(" v = SQLExpressionList() ")"
     { ZExpression e = new ZExpression(",");
       e.setOperands(v); ins.addValueSpec(e); }
     |
     q = SelectStatement() { ins.addValueSpec(q); }
   )
   ";" { return ins; }
}

// DeleteStatement ::= DELETE [FROM] TableReference [WHERE SQLExpression]
ZDelete DeleteStatement():
{
  ZDelete d;
  ZExp e;
  String s;
}
{
    "DELETE" ["FROM"] s = TableReference() { d = new ZDelete(s); }
    ["WHERE" e = SQLExpression() { d.addWhere(e); }] ";"
    { return d; }
}

// QueryStatement ::= SelectStatement
ZQuery QueryStatement():
{
  ZQuery q;
}
{
    q = SelectStatement() ";" { return q; }
}


/* ---------------- General Productions --------------------- */

String TableColumn():
{
  StringBuffer buf = new StringBuffer();
  String s;
}
{
    // user.table.column
    s = OracleObjectName() { buf.append(s); }
    [ "." s = OracleObjectName() { buf.append("." + s); }
     ["." s = OracleObjectName() { buf.append("." + s); } ]]
    { return buf.toString(); }
}

String OracleObjectName():
{
  Token t;
}
{
    t = <S_IDENTIFIER> { return t.toString(); }
}

String Relop():
{
  Token op;
}
{
   op = "="  { return op.toString(); }
 | op = "!=" { return op.toString(); }
 | op = "<=>"{ return op.toString(); }
 | op = "<>" { return op.toString(); }
 | op = ">"  { return op.toString(); }
 | op = ">=" { return op.toString(); }
 | op = "<"  { return op.toString(); }
 | op = "<=" { return op.toString(); }
}

// TableReference ::= OracleObjectName[.OracleObjectName]
String TableReference():
{
  StringBuffer buf = new StringBuffer();
  String s;
}
{
    s = OracleObjectName() { buf.append(s); }
    ["." s = OracleObjectName() { buf.append("." + s); } ]
    { return buf.toString(); }
}

void NumOrID():
{}
{
    <S_IDENTIFIER> | (["+" | "-"] <S_NUMBER>)
}


/* --------------- General Productions ends here --------------- */

/* ----------- SQL productions start here ----------------- */

ZQuery SelectStatement():
{
  ZQuery q;
  Vector v;
}
{
  q = SelectWithoutOrder()
  [ v = OrderByClause() { q.addOrderBy(v); } ]
  [ ForUpdateClause() { q.forupdate_ = true; } ]
  { return q; }

}

ZQuery SelectWithoutOrder():
{
  ZQuery q = new ZQuery();
  Vector select;
  ZFromClause from;
  ZExp where = null;
  ZGroupBy groupby = null;
  ZExpression setclause = null;
}
{
  "SELECT" [ "ALL" | "DISTINCT" { q.distinct_ = true; } ]
  select = SelectList()
  from = FromClause()
  [ where = WhereClause() ]
  //[ ConnectClause() ]
  [ LOOKAHEAD( ("GROUP" "BY")|"HAVING") groupby = GroupByClause() ]
  [ setclause = SetClause() ]
  {
    q.addSelect(select);
    q.addFrom(from);
    q.addWhere(where);
    q.addGroupBy(groupby);
    q.addSet(setclause);

    return q;
  }
}

/* Checks for whatever follows  SELECT */

// SelectList ::= * | COUNT(*) | SelectItem (, SelectItem)*
// 18/10/01 PY. Gibello - Removed "COUNT(*)" from here
// COUNT is an aggregate, like AVG...
Vector SelectList():
{
  Vector v = new Vector(8);
  ZSelectItem elem;
}
{
  "*" { v.addElement(new ZSelectItem("*")); return v; }
//  | LOOKAHEAD(3) "COUNT" "(" "*" ")"
//  { v.addElement(new ZSelectItem("COUNT(*)")); return v; } //TBD Expression ?
  | elem = SelectItem() { v.addElement(elem); }
    ("," elem = SelectItem() { v.addElement(elem); } )* { return v; }
}


// 01/07/00 PY. Gibello - Added LOOKAHEAD(3) before COUNT
// Due to a fix in AggregateFunc (COUNT added) that made the grammar ambiguous
// 18/10/01 PY. Gibello - Removed "COUNT(*)" from here (see aggregate funcs)

// SelectItem() ::= SelectStar | SQLSimpleExpression() [SelectAlias]
ZSelectItem SelectItem():
{
  String s;
  ZSelectItem it;
  ZExp e;
}
{
    LOOKAHEAD(SelectStar()) s = SelectStar() { return new ZSelectItem(s); }
// |   LOOKAHEAD(3) "COUNT" "(" s = SelectStar() ")"
//     { return new ZSelectItem("COUNT(" + s + ")"); } //TBD expression ?
|   e = SQLExpression() // Column or Expression
    {
      //PY.Gibello 21 Apr 2001 - added e.toString() as arg
      it = new ZSelectItem(e.toString());
      it.setExpression(e);
    }
    [s = SelectAlias() { it.setAlias(s); } ] // Column Alias
    { return it; }
}

// SelectAlias ::= (<S_IDENTIFIER>)+
String SelectAlias():
{
  Token tk;
}
{
   "AS" 
   tk = <S_IDENTIFIER> {return tk.toString(); }
}

// SelectStar() ::= OracleObjectName()".*" |
//               OracleObjectName()"." OracleObjectName() ".*"
String SelectStar():
{
  String s, s2;
}
{
  LOOKAHEAD(2)
  s = OracleObjectName()".*" { return new String(s + ".*"); } // table.*
| LOOKAHEAD(4)
  s = OracleObjectName()"." s2 = OracleObjectName() ".*"
  { return new String(s + "." + s2 + ".*"); } // schema.table.*
}

ZFromClause FromClause():
{
	ZFromClause fc;
}
{
	"FROM"
	(
		LOOKAHEAD(FromItemEx() "LEFT") fc = LeftOuterJoinClause() | 
		fc = InnerJoinClause()
	)
	{return fc;}
}

// FromClause ::= FromItem (, FromItem)*
ZFromClause InnerJoinClause():
{
  Vector v = new Vector(8);
  ZFromItemEx f;
}
{
    f = FromItemEx() { v.addElement(f); }
    ( "," f = FromItemEx() { v.addElement(f); } )*
    { return new ZFromClause(ZFromClause.INNER_JOIN, v, null); }
}
ZFromClause LeftOuterJoinClause():
{
	ZFromClause f;
	ZFromItemEx il, ir;
	ZExp cond = null;
}
{
	il = FromItemEx() "LEFT" ["OUTER"] "JOIN" ir = FromItemEx() 
	[ "ON" cond = SQLExpression() ]
	{
		Vector v = new Vector(2);
		v.addElement(il);
		v.addElement(ir);
		return new ZFromClause(ZFromClause.LEFT_JOIN, v, cond);
	}
}
// FromItemEx ::= ( FromItem | "(" SelectStatement ")" ) [ "AS" alias ]
ZFromItemEx FromItemEx():
{
	ZFromItemEx f = null;
	ZQuery subq = null;
	ZFromItem tab_item = null;
	String tab = null;
	Token tk = null;
}
{
	( (tab =  TableReference()) { tab_item = new ZFromItem(tab); f = new ZFromItemEx(tab_item); }
	 | ("(" subq = SubQuery() ")") { f = new ZFromItemEx(subq); }
	)
	 [ "AS" tk = <S_IDENTIFIER> {
	 	 if(subq != null)
	 	 	 subq.setAlias(tk.toString());
	 	 else tab_item.setAlias(tk.toString());
	  } ]  /* Alias Name */
	
	
	{return f; }
}



// FromItem ::= TableReference [as alias]
//ZFromItem FromItem():
//{
//  ZFromItem f;
//  String s;
//  Token tk;
//}
//{
//  s = TableReference() { f = new ZFromItem(s); }
//  [ "AS" tk = <S_IDENTIFIER> { f.setAlias(tk.toString()); } ]  /* Alias Name */
//  { return f; }
//}


ZExp WhereClause():
{
  ZExp e;
}
{
    "WHERE" e = SQLExpression() { return e; }
}
/*
void ConnectClause():
{}
{
    // The following grammar will take 2 "START WITH" expressions
    // which is not correct. But alright, because only valid statements
    // will be given.
   (["START" "WITH" SQLExpression()] "CONNECT" "BY" SQLExpression()
    ["START" "WITH" SQLExpression()])
}
*/
ZGroupBy GroupByClause():
{
  ZGroupBy g = null;
  Vector v = null;
  ZExp e;
}
{
  (("GROUP" "BY" v = GroupByList() { g = new ZGroupBy(v); }
  	 ["HAVING" e = SQLExpression() { g.setHaving(e);} ] )
  |("HAVING" e = SQLExpression() { g = new ZGroupBy(null); g.setHaving(e);} ))
  { return g; }
}
Vector GroupByList():
{
  Vector v = new Vector(8);
  String e;
}
{
    e = TableColumn() { v.addElement(e); }
    ("," e = TableColumn() { v.addElement(e); } )*
    { return v; }
}
// SetClause ::= UNION [ALL] Qry | INTERSECT Qry | MINUS Qry
// Qry ::= SelectWithoutOrder | ( SelectWithoutOrder )
ZExpression SetClause():
{
  ZExpression e;
  ZQuery q;
  Token t;
}
{
  ((t = "UNION" ["ALL"]) | t = "INTERSECT" | t = "MINUS")
  { e = new ZExpression(t.toString()); }
  // LOOKAHEAD("(") because Oracle supports "(" after a UNION
  (LOOKAHEAD("(") ("(" q = SelectWithoutOrder() { e.addOperand(q); } ")")   //)
      | q = SelectWithoutOrder() { e.addOperand(q); }
  )
  { return e; }
}

Vector OrderByClause():
{
  Vector v = new Vector();
  String s;
  ZOrderBy ob;
}
{
    "ORDER" "BY" s = TableColumn() { ob = new ZOrderBy(s); }
    ["ASC" | "DESC" { ob.setAscOrder(false); }] { v.addElement(ob); }
    ("," s = TableColumn() { ob = new ZOrderBy(s); }
     ["ASC" | "DESC" { ob.setAscOrder(false); }] { v.addElement(ob); } )*
    { return v; }
}

void ForUpdateClause():
{}
{
    "FOR" "UPDATE" [ "OF" TableColumn() ("," TableColumn())* ]
}

ZExp SQLExpression():
{
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
}
{
    e1 = SQLAndExpression()
    ( ("OR"|"||") e2 = SQLAndExpression() {
      if(single) { e = new ZExpression("OR", e1); }
      single=false;
      e.addOperand(e2);
    } )*
    { return (single ? e1 : e); }
}

ZExp SQLAndExpression():
{
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
}
{
    e1 = SQLUnaryLogicalExpression()
    ( ("AND"|"&&") e2 = SQLUnaryLogicalExpression() {
      if(single) { e = new ZExpression("AND", e1); }
      single=false;
      e.addOperand(e2);
    } )*
    { return (single ? e1 : e); }
}

ZExp SQLUnaryLogicalExpression():
{
  ZExp e1, e;
  boolean not = false;
}
{
    LOOKAHEAD(2) e = ExistsClause() { return e; }
|   ( ["NOT" { not = true; } ]
     e1 = SQLConditionExpression() {
       if(not) e = new ZExpression("NOT", e1);
       else e = e1;
       return e;
     }
    )
}

ZExpression ExistsClause():
{
  ZQuery q;
  boolean not = false;
}
{
    ["NOT" { not = true; } ] "EXISTS" "(" q = SubQuery() ")" {
      if(not) return new ZExpression("NOT EXISTS", q);
      else return new ZExpression("EXISTS", q);
    }
}

ZExp SQLConditionExpression():
{
	ZExp e;
}
{
	LOOKAHEAD("CASE") e = SQLSwitchClause() {return e;}
	|
	e = SQLRelationalExpression() {return e;}
}

ZExp SQLSwitchClause():
{
	ZExp e, cmpVal = null, ce, re;
	ZExp else_result = null;
	Vector cond = new Vector(), result = new Vector() ;
}
{
	"CASE" [cmpVal = SQLRelationalExpression() ]
	("WHEN" ce = SQLRelationalExpression()
	 "THEN" re = SQLRelationalExpression()
	  {cond.addElement(ce); result.addElement(re);})+
	["ELSE" else_result = SQLRelationalExpression() ]
	"END"
	{return new ZSwitchExpr(cond, result, cmpVal, else_result); }
}


// SQLRelationalExpression ::=
//    ( SQLSimpleExpression )
//    ( SQLRelationalOperatorExpression
//      | SQLInClause | SQLBetweenClause | SQLLikeClause | IsNullClause )?
ZExp SQLRelationalExpression():
{
  ZExp e1, eleft;
  ZExpression eright = null;
  Vector v;
  //boolean prior = false;
}
{
    ( 
      e1 = SQLSimpleExpression() {
        eleft = e1;
      } )


    /* Lookahead(2) is required because of NOT IN,NOT BETWEEN and NOT LIKE */
   ( eright = SQLRelationalOperatorExpression()
    |  LOOKAHEAD(2) (eright = SQLInClause())
    |  LOOKAHEAD(2) (eright = SQLBetweenClause())
    |  LOOKAHEAD(2) (eright = SQLLikeClause())
    |  LOOKAHEAD(2) (eright = SQLREGEXPClause())
    |  eright = IsNullClause()
   )?

   {
     if(eright == null) return eleft;
     Vector v2 = eright.getOperands();
     if(v2 == null) v2 = new Vector(); //For IS NULL, which is unary!
     v2.insertElementAt(eleft, 0);
     eright.setOperands(v2);
     return eright;
   }
}

Vector SQLExpressionList():
{
  Vector v = new Vector(8);
  ZExp e;
}
{
    e = SQLExpression() { v.addElement(e); }
    ("," e = SQLExpression() { v.addElement(e); } )*
    { return v; }
}

ZExpression SQLRelationalOperatorExpression():
{
  ZExpression e;
  ZExp e1, eright;
  String op;
  String unaryOp = null;
}
{
    op = Relop() { e = new ZExpression(op); }

    /* Only after seeing an ANY/ALL or "(" followed by a SubQuery() we can
    determine that is is a sub-query
    */
    (   LOOKAHEAD("ANY" | "ALL" | "(" "SELECT")    //)
        (["ALL" { unaryOp = "ALL"; } | "ANY" { unaryOp = "ANY"; } ]
         "(" e1 = SubQuery() ")" {
            if(unaryOp == null) eright = e1;
            else eright = new ZExpression(unaryOp, e1);
          }
        )
        |
        e1 = SQLSimpleExpression() {  eright = e1; }
    )

    { e.addOperand(eright); return e; }
}
/*
ZExp SQLSimpleExpressionOrPreparedCol():
{
  ZExp e;
}
{
   e = SQLSimpleExpression() { return e; }
 | e = PreparedCol() { return e; } // For prepared columns ("?")
}
*/
// For prepared columns ("?")

ZExp PreparedCol(): {}
{
  "?" { return new ZExpression("?"); } // For prepared columns ("?")
}

ZExpression SQLInClause():
{
  ZExpression e;
  ZQuery q;
  boolean not = false;
  Vector v;
}
{
  ["NOT" { not = true; }]
  "IN" { e = new ZExpression(not ? "NOT IN" : "IN"); }
  "(" (v = SQLExpressionList() { e.setOperands(v); }
   | q = SubQuery() { e.addOperand(q); }) ")"
  { return e; }
}

ZExpression SQLBetweenClause():
{
  ZExpression e;
  ZExp  e1, e2;
  boolean not = false;
}
{
  ["NOT" { not = true; }]
  "BETWEEN" e1 = SQLSimpleExpression() "AND" e2 = SQLSimpleExpression() {
    if(not) e = new ZExpression("NOT BETWEEN", e1, e2);
    else e = new ZExpression("BETWEEN", e1, e2);
    return e;
  }
}

ZExpression SQLLikeClause():
{
  ZExp eright;
  ZExpression e;
  boolean not = false;
}
{
  ["NOT" { not = true; }]
  "LIKE" eright = SQLSimpleExpression() {
    if(not) e = new ZExpression("NOT LIKE", eright);
    else e = new ZExpression("LIKE", eright);
    return e;
  }
}

ZExpression SQLREGEXPClause():
{
  ZExp eright;
  ZExpression e;
  boolean not = false;
}
{
  ["NOT" { not = true; }]
  "REGEXP" eright = SQLSimpleExpression() {
    if(not) e = new ZExpression("NOT REGEXP", eright);
    else e = new ZExpression("REGEXP", eright);
    return e;
  }
}

ZExpression IsNullClause():
{
  boolean not = false;
}
{
  "IS" ["NOT" { not = true; }] "NULL" {
    return(not ? new ZExpression("IS NOT NULL") : new ZExpression("IS NULL"));
  }
}


// SQLSimpleExpression
//    ::= SQLMultiplicativeExpression (OP SQLMultiplicativeExpression)*
// OP ::= + | - 
ZExp SQLSimpleExpression():
{
  Token op;
  ZExp e1, e2;
  ZExpression e = null;
}
{
    e1 = SQLMultiplicativeExpression()
    ( ( op = "+" |  op = "-" ) e2 = SQLMultiplicativeExpression() {
      e = new ZExpression(op.toString(), e1);
      e.addOperand(e2);
      e1 = e;
    } )*
    { return e1; }
}


// SQLMultiplicativeExpression
//    ::= SQLExpotentExpression (OP SQLExpotentExpression)*
// OP ::= * | / | "DIV" | "MOD" | % |
ZExp SQLMultiplicativeExpression():
{
  Token op;
  ZExp e1, e2;
  ZExpression e = null;
}
{
    e1 = SQLExpotentExpression()
    ( (op = "*" | op = "/" | op = "%" | op = "DIV" | op = "MOD" ) e2 = SQLExpotentExpression() {
      e = new ZExpression(op.toString(), e1);
      e.addOperand(e2); 
      e1 = e;
    } )*
    { return e1; }
}

// SQLExpotentExpression ::= SQLUnaryExpression (** SQLUnaryExpression)*
ZExp SQLExpotentExpression():
{
  Token op;
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
}
{
    e1 = SQLUnaryExpression()
    ( op = "^" e2 = SQLUnaryExpression() {
      if(single) e = new ZExpression(op.toString(), e1);
      single = false;
      e.addOperand(e2);
    } )*
    { return (single ? e1 : e); }
}

// SQLUnaryExpression ::= [+|-] SQLInversionExpression
ZExp SQLUnaryExpression():
{
  Token op = null;
  ZExp e1, e;
}
{
  [ op = "+" |  op = "-"] e1 = SQLInversionExpression() { 
    if(op == null || op.toString().equals("+") ) e = e1;
    else e = new ZExpression(op.toString(), e1);
    return e;
  }
}

ZExp SQLInversionExpression():
{
  Token op = null;
  ZExp e;
}
{
  [ op = "!" ] e = SQLPrimaryExpression() { 
    if(op == null ) return e;
    else return new ZExpression(op.toString(), e);
  }
}


// 01/07/00 PY.Gibello - Added COUNT(*) to SQLPrimaryExpression
// TBD should be ZConstant("COUNT(*)", ZConstant.STRING))
// instead of ZConstant("*", ZConstant.COLUMNNAME) ??
// 01/06/02 PY.Gibello - Added ALL | DISTINCT (then the column name
// starts with "all " or "distinct " when required, which may not be the
// fairest solution...)

// SQLPrimaryExpression ::= NULL | OuterJoinExpression
//   | AggregateFunc ( [ ALL | DISTINCT ] SQLSimpleExpression ) | TableColumn
//   | COUNT(*)
//   | <NUMBER> | <STRING> | <BIND>
ZExp SQLPrimaryExpression():
{
  Token t;
  String s, s2;
  int modifier = -1;
  ZExp e = null;
  int nparm;
  Vector parm = null;
}
{
  "NULL" { return new ZConstant("NULL", ZConstant.NULL); }
/*
|  LOOKAHEAD(OuterJoinExpression()) s = OuterJoinExpression() {
     return new ZConstant(s, ZConstant.COLUMNNAME);
     //return new ZExpression("_NOT_SUPPORTED"); //TBD
   }
*/
|  LOOKAHEAD(3) "COUNT" "(" "*" ")" {
     return new ZExpression("COUNT",
      new ZConstant("*", ZConstant.COLUMNNAME), ZExpression.AGGR_ALL);
   }
|  
   LOOKAHEAD(3, FunctionOrAggregateName() "(") //function/aggreation
	      (s = FunctionOrAggregateName() 
	      "("
	           (
		           LOOKAHEAD("ALL"|"DISTINCT") (
		           		("ALL" { modifier = ZExpression.AGGR_ALL; } | "DISTINCT" { modifier = ZExpression.AGGR_DISTINCT; }) 
		           		 e = SQLExpression()
		           )
		           |
		           LOOKAHEAD(")") {parm = new Vector(0);}
				   |
		           parm = SQLExpressionList()
	           ) 
	      ")" )
	 {
	    if( ZUtils.isAggregate(s) || ZUtils.isCustomAggregate(s) ){
	    	if(modifier == -1){
	    		modifier = ZExpression.AGGR_ALL;
	    		if(parm.size() != 1)
	    			throw new ParseException("Aggregate " + s + " should have 1 parameter");
	    		e = (ZExp)parm.get(0);
	    	}
	    	return new ZExpression(s, e, modifier);
	    }
		
	  else if( (nparm = ZUtils.isCustomFunction(s)) >= 0 ){
	  	if(modifier != -1)
	  		throw new ParseException("Function " + s + " should not have modifier ALL/DISTINCT");
	    
	    if( nparm != ZExpression.VAR_PARAM && nparm != parm.size() ) {
	      throw new ParseException("Function " + s + " should have "
	         + nparm + " parameter(s)");
	    }
	    return new ZExpression(s, parm);
	  }
	  else throw new ParseException("Undefined function/aggreation: " + s);
   }  
   
/*
|  LOOKAHEAD(3, s = AggregateFunc(), {s != null}) s = AggregateFunc() "("
    ["ALL" { modifier="all "; } | "DISTINCT" { modifier="distinct "; }]
    e = SQLSimpleExpression() ")"
     { return new ZExpression(s, e, modifier); }
|  LOOKAHEAD(2) e = FunctionCall() { return e; } 
*/
/*
|  LOOKAHEAD(<S_IDENTIFIER> "(") e = FunctionCall() { return e; }
*/
|  s = TableColumn() { return new ZConstant(s, ZConstant.COLUMNNAME); }
|  t = <S_NUMBER> { return new ZConstant(t.toString(), ZConstant.NUMBER); }
|  t = <S_CHAR_LITERAL> { return new ZConstant(t.toString(), ZConstant.STRING); }
//|  t = <S_BIND> { return new ZConstant(t.toString(), ZConstant.STRING); }
|  "(" e = SQLExpression() ")" { return e; }
|  e = Interval() {return e;}
}
String FunctionOrAggregateName():
{
  Token t;
  String s;
}
{
(  t = "SUM" 
| t = "AVG" 
| t = "MAX" 
| t = "MIN"
| t = "COUNT"
| t = "LEFT"
| t = "MOD"
| t = "DATE"
| t = "DAY"
| t = "HOUR"
| t = "MINUTE"
| t = "MONTH"
| t = "QUARTER"
| t = "SECOND"
| t = "WEEK"
| t = "YEAR"
| t = <S_IDENTIFIER> 
)
{return t.toString();}
}
ZInterval Interval():
{ 	
	String type;
	ZExp exp;
}	
{
	"INTERVAL" exp = SQLExpression() type = IntervalType()
	{return new ZInterval(type, exp);}
}


String IntervalType():
{
	Token t;
}
{
	(
	t = "SECOND"
|	t = "MINUTE"
|	t = "HOUR"
|	t = "DAY"
|	t = "WEEK"
|	t = "MONTH"
|	t = "QUARTER"
|	t = "YEAR"
)
	{return t.toString();}
}

// AggregateFunc ::= SUM | AVG | MAX | MIN | COUNT
// 01/07/00 PY.Gibello - Added COUNT
/*
String AggregateFunc():
{
  Token t;
  String s;
}
{
  t = "SUM" { return t.toString(); }
| t = "AVG" { return t.toString(); }
| t = "MAX" { return t.toString(); }
| t = "MIN" { return t.toString(); }
| t = "COUNT" { return t.toString(); }
| t = <S_IDENTIFIER> {
	 s = t.toString();
	 if( ZUtils.isCustomAggregate(s) )
	 	 return s;
	 else return null; 
  }
}

ZExpression FunctionCall():
{
  Token t;
  String s;
  ZExpression e;
  Vector parm = null;
}
{
  (t = <S_IDENTIFIER> { s = t.toString(); }) "("
  [ parm = SQLExpressionList() ] ")" {

    int nparm = ZUtils.isCustomFunction(s);
    //if(nparm < 0) nparm = (ZUtils.isAggregate(s) ? 1 : -1);
    if(nparm < 0)
      throw new ParseException("Undefined function: " + s);
    if(nparm > 0) {
      if(parm == null || parm.size() != nparm)
        throw new ParseException("Function " + s + " should have "
         + nparm + " parameter(s)");
    }

    e = new ZExpression(s);
    e.setOperands(parm);
    return e;
  }
}
*/
/*
String OuterJoinExpression():
{
  String s = null;
  String c = "";
}
{
    // user.table.col
    s = OracleObjectName()
     [ "." c = OracleObjectName() { s += "." + c; }
     ["."  c = OracleObjectName() { s += "." + c; } ]]
    "(" "+" ")"
    {
      return s + "(+)";
    }
}
*/
ZQuery SubQuery():
{
  ZQuery q;
}
{
  q = SelectWithoutOrder() {
	return q; 
  }
}

